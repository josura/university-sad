install.packages("fpc")
library(fpc)
cluster_pvalue <-pamk(funzione_pvalue(esem.matr))
source('~/Desktop/universita/university-sad/data_mining/progetto_Data/progetto_in.R')
install.packages("cluster")
cluster_pvalue <-pamk(funzione_pvalue(esem.matr),krange = 2:20,criterion = "asw")
cluster_pvalue <-pamk(funzione_pvalue(esem.matr),krange = 2:20,criterion = "asw",usepam = TRUE)
library(stats)
install.packages("proxy")
library(proxy)
distance_vec <- dist(t(funzione_pvalue(esem.matr)),method = "cosine")
hiera_cluster.pvalue <- hclust(distance_vec)
plot(hiera_cluster.pvalue)
hiera_cluster.pvalue$labels
hiera_cluster.pvalue
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr),krange = 2:20,criterion = "asw",usepam = TRUE)
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr),krange = 1:20,criterion = "asw",usepam = TRUE)
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr),krange = 1:3,criterion = "asw",usepam = TRUE)
plot(cluster_pvalue.pam)
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr))
library(fpc)
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr))
source('~/Desktop/universita/university-sad/data_mining/progetto_Data/progetto_in.R')
library(proxy)
distance_vec <- dist(t(funzione_pvalue(esem.matr)),method = "cosine")
hiera_cluster.pvalue <- hclust(distance_vec)
plot(hiera_cluster.pvalue)
hiera_cluster.pvalue
library(fpc)
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr))
cluster_pvalue.pam <-pamk(funzione_pvalue(esem.matr),krange = 1:3,criterion = "asw",usepam = TRUE)
cluster_pvalue.pam
plotcluster(x = funzione_pvalue(esem.matr),cluster_pvalue.pam$pamobject)
plot(cluster_pvalue.pam$pamobject)
layout(matrix(c(1,2),1,2))
plot(cluster_pvalue.pam$pamobject)
plotcluster(x = funzione_pvalue(esem.matr),cluster_pvalue.pam$pamobject)
cluster_ipotesu.pam <- pamk(funzione_ipotesi(esem.matr,0.05),krange = 1:3,criterion = "asw",usepam = TRUE)
cluster_ipotesu.pam
distance_vec.ipotesi <- dist(t(funzione_ipotesi(esem.matr,0.05)),method = "jaccard")
distance_vec
hclust(distance_vec.ipotesi,method = "complete")
hiera_cluster.ipotesi <-  hclust(distance_vec.ipotesi,method = "complete")
plot(hiera_cluster.ipotesi)
layout(matrix(1))
plot(hiera_cluster.ipotesi)
cutree(hiera_cluster.ipotesi,k=2)
plot(hiera_cluster.pvalue)
plot(hiera_cluster.ipotesi)
esem.attri <- matrix(data = c("scoliosi","pippolosi","tubercolosi","osi"),nrow = 2)
esem.attri
esem.attri <- matrix(data = c("scoliosi","pippolosi","tubercolosi"),nrow = 1)
esem.attri
rep(0,4)
rep("",4)
rep("ciao",4)
table(esem.attri)
esem.attri <- matrix(data = c("scoliosi","pippolosi","pippolosi"),nrow = 1)
table(esem.attri)
table(esem.attri[cutree(hiera_cluster.ipotesi,k=2)==1])
table(esem.attri[cutree(hiera_cluster.ipotesi,k=2)==2])
cutree(hiera_cluster.ipotesi,k=2)==2
attr_vect.cluster <- function(attr_vect,cluster_vect,numk){
vectret <- c(rep("",numk))
for (i in 1:numk) {
tt <- table(attr_vect[cluster_vect== numk])
vectret[i] <- names(tt[tt==max(tt)])[1]
}
vectret
}
attr_vect.cluster(esem.attri,hiera_cluster.cutree(hiera_cluster.ipotesi,k=2),2)
attr_vect.cluster(esem.attri,cutree(hiera_cluster.ipotesi,k=2),2)
attr_clust <- attr_vect.cluster(esem.attri,cutree(hiera_cluster.ipotesi,k=2),2)
plot(hiera_cluster.ipotesi,labels = attr_clust)
source('~/Desktop/universita/university-sad/data_mining/progetto_Data/progetto_in.R')
library(cluster)
plot(hiera_cluster.ipotesi,labels = attr_clust)
hiera_cluster.ipotesi <-  hclust(distance_vec.ipotesi,method = "complete")
distance_vec.ipotesi <- dist(t(funzione_ipotesi(esem.matr,0.05)),method = "jaccard")
hiera_cluster.ipotesi <-  hclust(distance_vec.ipotesi,method = "complete")
plot(hiera_cluster.ipotesi)
cutree(hiera_cluster.ipotesi,k=2)
esem.attri <- matrix(data = c("scoliosi","scoliosi","tubercolosi"),nrow = 1)
esem.attri
attr_vect.cluster <- function(attr_vect,cluster_vect,numk){
vectret <- c(rep("",numk))
for (i in 1:numk) {
tt <- table(attr_vect[cluster_vect== numk])
vectret[i] <- names(tt[tt==max(tt)])[1]
}
vectret
}
attr_clust <- attr_vect.cluster(esem.attri,cutree(hiera_cluster.ipotesi,k=2),2)
plot(hiera_cluster.ipotesi,labels = attr_clust)
silhouette(hiera_cluster.ipotesi)
silhouette(cluster_ipotesu.pam)
silhouette(cluster_pvalue.pam)
cluster_ipotesu.pam$pamobject$clustering
silhouette(cluster_pvalue.pam$pamobject)
silhouette(cutree(hiera_cluster.ipotesi,k=2),distance_vec.ipotesi)
plot(silhouette(cutree(hiera_cluster.ipotesi,k=2),distance_vec.ipotesi))
library(MASS)
weibullpar <- function(M){
retmat <- matrix(nrow = nrow(M),ncol = 2)
for (i in 1:nrow(M)) {
retmat[i,] <- fitdistr(M[i,],densfun = "weibull")$estimate
}
retmat
}
parametri_weibull <- weibullpar(esem.matr)
esem.matr <- matrix(c(1:12),nrow = 4)
funziona <- function(x,y,M){
M[x,y] <- 100*x+y
}
funziona_vect <- Vectorize(funziona,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr)
esempio <- as.data.frame(outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr),row.names = c("gene1","gene2","gene3"))
esempio
library(MASS)
library(cluster)
weibullpar <- function(M){
retmat <- matrix(nrow = nrow(M),ncol = 2)
for (i in 1:nrow(M)) {
retmat[i,] <- fitdistr(M[i,],densfun = "weibull")$estimate
}
retmat
}
parametri_weibull <- weibullpar(esem.matr)
parametri_weibull
funzione_pvalue <- function(M){
par_weib <- weibullpar(M)
ret_mat <- matrix(data = 0,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
ret_mat[i,] <- pweibull(M[i,],shape = par_weib[i,1],scale = par_weib[i,2])
}
ret_mat
}
funzione_pvalue(esem.matr)
funzione_pvalue <- function(M){
par_weib <- weibullpar(M)
ret_mat <- matrix(data = 0,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
ret_mat[i,] <- pweibull(M[i,],shape = par_weib[i,1],scale = par_weib[i,2],lower.tail = FALSE)
}
ret_mat
}
funzione_pvalue(esem.matr)
esempio <- as.data.frame(outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr),row.names = c("gene1","gene2","gene3"))
esem.matr <- matrix(c(1:12),nrow = 4)
funziona <- function(x,y,M){
M[x,y] <- 100*x+y
}
funziona_vect <- Vectorize(funziona,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr)
esempio <- as.data.frame(outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr),row.names = c("gene1","gene2","gene3"))
esempio
library(MASS)
weibullpar <- function(M){
retmat <- matrix(nrow = nrow(M),ncol = 2)
for (i in 1:nrow(M)) {
retmat[i,] <- fitdistr(M[i,],densfun = "weibull")$estimate
}
retmat
}
parametri_weibull <- weibullpar(esem.matr)
parametri_weibull
funzione_prob_greater_than <- function(M){
par_weib <- weibullpar(M)
ret_mat <- matrix(data = 0,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
ret_mat[i,] <- pweibull(M[i,],shape = par_weib[i,1],scale = par_weib[i,2],lower.tail = FALSE)
}
ret_mat
}
funzione_prob_greater_than(esem.matr)
funzione_ipotesi <- function(M,significance){
pval_mat <- funzione_prob_greater_than(M)
ret_mat <- matrix(0,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
for (j in 1:ncol(M)) {
if(pval_mat[i,j]>significance){
ret_mat[i,j] = 1
}
ret_mat
}
funzione_ipotesi(esem.matr,0.05)
greaterthanfunc <- function(x,y,M,alpha){
M[x,y] <- M[x,y]>alpha
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr,0.05)
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y","alpha"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr,0.05)
greaterthanfunc <- function(x,y,alpha,M){
M[x,y] <- M[x,y]>alpha
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y","alpha"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),0.05,funziona_vect,esem.matr)
greaterthanfunc <- function(x,y,M){
M[x,y] <- M[x,y]>0.05
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,esem.matr)
greaterthanfunc <- function(x,y,M){
M[x,y] <- (M[x,y]>0.05) ? 1 : 0
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),funziona_vect,funzione_prob_greater_than(esem.matr))
outer(1:nrow(esem.matr),1:ncol(esem.matr),greaterthanfunc_vect,funzione_prob_greater_than(esem.matr))
greaterthanfunc <- function(x,y,M){
M[x,y] <- (M[x,y]>0.05)
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),greaterthanfunc_vect,funzione_prob_greater_than(esem.matr))
greaterthanfunc <- function(x,y,M,alpha){
M[x,y] <- (M[x,y]>alpha)
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),greaterthanfunc_vect,funzione_prob_greater_than(esem.matr),0.05)
funzione_ipotesi <- function(M,significance){
greaterthanfunc <- function(x,y,M,alpha){
M[x,y] <- (M[x,y]>alpha)
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),greaterthanfunc_vect,funzione_prob_greater_than(esem.matr),0.05)
}
funzione_ipotesi_opt(esem.matr,0.05)
funzione_ipotesi_opt <- function(M,significance){
greaterthanfunc <- function(x,y,M,alpha){
M[x,y] <- (M[x,y]>alpha)
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(esem.matr),1:ncol(esem.matr),greaterthanfunc_vect,funzione_prob_greater_than(esem.matr),significance)
}
funzione_ipotesi_opt(esem.matr,0.05)
funzione_ipotesi <- function(M,significance){
pval_mat <- funzione_prob_greater_than(M)
ret_mat <- matrix(0,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
for (j in 1:ncol(M)) {
ret_mat[i,j] = pval_mat[i,j]>significance
}
ret_mat
}
funzione_ipotesi(esem.matr,0.05)
funzione_ipotesi <- function(M,significance){
pval_mat <- funzione_prob_greater_than(M)
ret_mat <- matrix(FALSE,nrow = nrow(M),ncol = ncol(M))
for (i in 1:nrow(M)) {
for (j in 1:ncol(M)) {
ret_mat[i,j] = pval_mat[i,j]>significance
}
ret_mat
}
funzione_ipotesi(esem.matr,0.05)
funzione_ipotesi_opt <- function(M,significance){
greaterthanfunc <- function(x,y,M,alpha){
M[x,y] <- (M[x,y]>alpha)
}
greaterthanfunc_vect <- Vectorize(greaterthanfunc,vectorize.args = c("x","y"))
outer(1:nrow(M),1:ncol(M),greaterthanfunc_vect,funzione_prob_greater_than(M),significance)
}
funzione_ipotesi_opt(esem.matr,0.05)
library(fpc)
source('~/Desktop/universita/university-sad/data_mining/progetto_Data/progetto_in.R')
library(fpc)
cluster_pvalue.pam <-pamk(funzione_prob_greater_than(esem.matr),krange = 1:3,criterion = "asw",usepam = TRUE)
cluster_pvalue.pam
cluster_ipotesu.pam <- pamk(funzione_ipotesi(esem.matr,0.05),krange = 1:3,criterion = "asw",usepam = TRUE)
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:3,criterion = "asw",usepam = TRUE)
distance_vec
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:2,criterion = "asw",usepam = TRUE)
cluster_pvalue.pam
plot(cluster_pvalue_cos.pam)
plotcluster(x = funzione_prob_greater_than(esem.matr),cluster_pvalue.pam$pamobject)
plot(cluster_pvalue.pam$pamobject)
plot(cluster_pvalue_cos.pam$pamobject)
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:dim(distance_vec),criterion = "asw",usepam = TRUE)
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:nrow(distance_vec),criterion = "asw",usepam = TRUE)
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:ncol(distance_vec),criterion = "asw",usepam = TRUE)
ncol(distance_vec)
nrow(distance_vec)
dim(distance_vec)
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:(nrow(distance_vec)-1),criterion = "asw",usepam = TRUE)
cluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
pamk(distance_vec,diss = TRUE,krange = 1:,criterion = "asw",usepam = TRUE)
}
cluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
pamk(distance_vec,diss = TRUE,krange = 1:ncol(M),criterion = "asw",usepam = TRUE)
}
cluster_pvalue_cos(esem.matr)
cluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
pamk(distance_vec,diss = TRUE,krange = 1:(ncol(M)-1),criterion = "asw",usepam = TRUE)
}
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:(nrow(distance_vec)-1),criterion = "asw",usepam = TRUE)
cluster_pvalue.pam
cluster_pvalue_cos(esem.matr)
cluster_pvalue_cos.pam
cluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
pamk(t(distance_vec),diss = TRUE,krange = 1:(ncol(M)-1),criterion = "asw",usepam = TRUE)
}
cluster_pvalue_cos.pam <- pamk(distance_vec,diss = TRUE,krange = 1:(nrow(distance_vec)-1),criterion = "asw",usepam = TRUE)
cluster_pvalue_cos(esem.matr)
cluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
pamk(distance_vec,diss = TRUE,krange = 1:(ncol(M)-1),criterion = "asw",usepam = TRUE)
}
cluster_ipotesi_jac <- function(M){
distance_vec <- dist(t(funzione_ipotesi_opt(M)),method = "jaccard")
pamk(distance_vec,diss = TRUE,krange = 1:(ncol(M)-1),criterion = "asw",usepam = TRUE)
}
cluster_ipotesi_jac(esem.matr)
cluster_ipotesi_jac <- function(M){
distance_vec <- dist(t(funzione_ipotesi_opt(M,0.05)),method = "jaccard")
pamk(distance_vec,diss = TRUE,krange = 1:(ncol(M)-1),criterion = "asw",usepam = TRUE)
}
cluster_ipotesi_jac(esem.matr)
silhouette(cutree(hiera_cluster.ipotesi,k=2),distance_vec.ipotesi)
hiera_cluster.ipotesi <-  hclust(distance_vec.ipotesi,method = "complete")
silhouette(cutree(hcluster_ipotesi_jac(esem.attri),k=2),distance_vec.ipotesi)
hcluster_ipotesi_jac <- function(M){
distance_vec <- dist(t(funzione_ipotesi_opt(M,0.05)),method = "jaccard")
hclust(distance_vec)
}
silhouette(cutree(hcluster_ipotesi_jac(esem.attri),k=2),distance_vec.ipotesi)
plot(silhouette(cutree(hcluster_ipotesi_jac(esem.matr),k=2),distance_vec.ipotesi))
silhouette(cutree(hcluster_ipotesi_jac(esem.matr),k=2),distance_vec.ipotesi)
silhouette(cutree(hcluster_ipotesi_jac(esem.matr),k=2),dist(t(funzione_ipotesi_opt(M,0.05)),method = "jaccard"))
hiera_cluster.pvalue <- hclust(distance_vec)
silhouette(cutree(hiera_cluster.pvalue),distance_vec)
silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
silcas <- silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
silcas
summary(silcas)
silcassum <- summary(silcas)
silcassum$avg.width
silcas <- silhouette(cutree(hiera_cluster.pvalue,3),distance_vec)
silcassum <- summary(silcas)
silcassum$avg.width
silcassum
silcas <- silhouette(cutree(hiera_cluster.pvalue,1),distance_vec)
silcassum <- summary(silcas)
silcassum
silcas <- silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
silcassum <- summary(silcas)
silcassum
silcas <- silhouette(cutree(hiera_cluster.pvalue,1),distance_vec)
silcassum <- summary(silcas)
silcassum
silcassum$Mode
silcassum[1]
silcassum[2]
silcassum[2,]
class(silcassum[2])
silcassum[2]==1
silcassum[2]==0
silcas <- silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
silcassum <- summary(silcas)
class(silcassum[2])
silcassum[2]
silcassum[2]==0
silcas <- silhouette(cutree(hiera_cluster.pvalue,1),distance_vec)
silcassum <- summary(silcas)
class(silcassum)
silcas <- silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
silcassum <- summary(silcas)
class(silcassum)
class(silcas)
silcas <- silhouette(cutree(hiera_cluster.pvalue,1),distance_vec)
class(silcas)
class(silcas) == "silhouette"
silcas <- silhouette(cutree(hiera_cluster.pvalue,2),distance_vec)
class(silcas) == "silhouette"
optimal_numclast <- function(hierarch,distances){
max <- -2
opt_clust <- -1
for (numk in 2:(ncol(M)-1)) {
silcas <- silhouette(cutree(hierarch,numk),distances)
if(class(silcas)=="silhouette" && summary(silcas)$avg.width > max){
opt_clust <- numk
}
opt_clust
}
hcluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
hiera <- hclust(distance_vec)
cutree(hiera,optimal_numclast(hiera,distance_vec))
}
hcluster_pvalue_cos(esem.matr)
optimal_numclast <- function(hierarch,distances){
max <- -2
opt_clust <- -1
for (numk in 2:(ncol(distances)-1)) {
silcas <- silhouette(cutree(hierarch,numk),distances)
if(class(silcas)=="silhouette" && summary(silcas)$avg.width > max){
opt_clust <- numk
}
opt_clust
}
hcluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
hiera <- hclust(distance_vec)
cutree(hiera,optimal_numclast(hiera,distance_vec))
}
hcluster_pvalue_cos(esem.matr)
hcluster_ipotesi_jac <- function(M){
distance_vec <- dist(t(funzione_ipotesi_opt(M,0.05)),method = "jaccard")
hiera <- hclust(distance_vec)
cutree(hiera,optimal_numclast(hiera,distance_vec))
}
hcluster_ipotesi_jac(esem.matr)
optimal_numclast_binary <- function(hierarch,distances){
l <- 2
m <- 0
r <- ncol(distances)-1
max <- -2
while ( l<=r ){
m <-  l + ((r - l)* 2)
silcas <- silhouette(cutree(hierarch,m),distances)
if (class(silcas)=="silhouette" && summary(silcas)$avg.width > max ){
max <- summary(silcas)$avg.width
l = m +1;
}
else
r = m -1;
}
l
}
optimal_numclast <- function(hierarch,distances){
max <- -2
opt_clust <- -1
for (numk in 2:(ncol(distances)-1)) {
silcas <- silhouette(cutree(hierarch,numk),distances)
if(class(silcas)=="silhouette" ){
if(summary(silcas)$avg.width > max)
opt_clust <- numk
else return opt_clust
}
opt_clust
}
optimal_numclast <- function(hierarch,distances){
max <- -2
opt_clust <- -1
for (numk in 2:(ncol(distances)-1)) {
silcas <- silhouette(cutree(hierarch,numk),distances)
if(class(silcas)=="silhouette" ){
if(summary(silcas)$avg.width > max)
opt_clust <- numk
else return(opt_clust)
}
opt_clust
}
optimal_numclast_binary <- function(hierarch,distances){
l <- 2
m <- 0
r <- ncol(distances)-1
max <- -2
while ( l<=r ){
m <-  l + ((r - l)* 2)
silcas <- silhouette(cutree(hierarch,m),distances)
if (class(silcas)=="silhouette" && summary(silcas)$avg.width > max ){
max <- summary(silcas)$avg.width
l = m +1;
}
else
r = m -1;
}
m
}
hcluster_pvalue_cos <- function(M){
distance_vec <- dist(t(funzione_prob_greater_than(M)),method = "cosine")
hiera <- hclust(distance_vec)
opt_clust <- optimal_numclast(hiera,distance_vec)
list(cutree(hiera,opt_clust),opt_clust)
}
hcluster_pvalue_cos(esem.matr)
